-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.activity
(
    activity_id integer NOT NULL DEFAULT nextval('activity_activity_id_seq'::regclass),
    person_id integer NOT NULL,
    description text COLLATE pg_catalog."default",
    date_time timestamp without time zone,
    CONSTRAINT activity_pkey PRIMARY KEY (activity_id)
);

CREATE TABLE IF NOT EXISTS public.auth_group
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT auth_group_pkey PRIMARY KEY (id),
    CONSTRAINT auth_group_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.auth_group_permissions
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    group_id integer NOT NULL,
    permission_id integer NOT NULL,
    CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id),
    CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id)
);

CREATE TABLE IF NOT EXISTS public.auth_permission
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT auth_permission_pkey PRIMARY KEY (id),
    CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename)
);

CREATE TABLE IF NOT EXISTS public.auth_user
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    password character varying(128) COLLATE pg_catalog."default" NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    email character varying(254) COLLATE pg_catalog."default" NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL,
    CONSTRAINT auth_user_pkey PRIMARY KEY (id),
    CONSTRAINT auth_user_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.auth_user_groups
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id integer NOT NULL,
    group_id integer NOT NULL,
    CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id),
    CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id)
);

CREATE TABLE IF NOT EXISTS public.auth_user_user_permissions
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id integer NOT NULL,
    permission_id integer NOT NULL,
    CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id),
    CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id)
);

CREATE TABLE IF NOT EXISTS public.diagnosed_disease
(
    diagnosed_disease_id integer NOT NULL DEFAULT nextval('diagnosed_disease_diagnosed_disease_id_seq'::regclass),
    diagnosis_id integer,
    disease_id integer,
    diagnosed_datetime timestamp without time zone,
    CONSTRAINT diagnosed_disease_pkey PRIMARY KEY (diagnosed_disease_id)
);

CREATE TABLE IF NOT EXISTS public.diagnoses
(
    diagnosisid integer NOT NULL DEFAULT nextval('diagnoses_diagnosisid_seq'::regclass),
    patientid integer,
    practitionerid integer,
    diagnosisdate date,
    automateddiagnosis text COLLATE pg_catalog."default",
    practitionerdiagnosis text COLLATE pg_catalog."default",
    regulatorrating integer,
    face_image bytea,
    nail_image bytea,
    hands_image bytea,
    other_image bytea,
    isaccepted boolean,
    isconcluded boolean,
    CONSTRAINT diagnoses_pkey PRIMARY KEY (diagnosisid)
);

CREATE TABLE IF NOT EXISTS public.diagnosisratings
(
    ratingid integer NOT NULL DEFAULT nextval('diagnosisratings_ratingid_seq'::regclass),
    regulatorid integer,
    diagnosisid integer,
    ratingvalue numeric(5, 2),
    comment text COLLATE pg_catalog."default",
    CONSTRAINT diagnosisratings_pkey PRIMARY KEY (ratingid)
);

CREATE TABLE IF NOT EXISTS public.digitaldataratings
(
    dataratingid integer NOT NULL DEFAULT nextval('digitaldataratings_dataratingid_seq'::regclass),
    regulatorid integer,
    knowledgeid integer,
    ratingvalue numeric(5, 2),
    validation boolean,
    editing boolean,
    CONSTRAINT digitaldataratings_pkey PRIMARY KEY (dataratingid)
);

CREATE TABLE IF NOT EXISTS public.diseases
(
    diseaseid integer NOT NULL DEFAULT nextval('diseases_diseaseid_seq'::regclass),
    diseasename character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT diseases_pkey PRIMARY KEY (diseaseid)
);

CREATE TABLE IF NOT EXISTS public.django_admin_log
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    action_time timestamp with time zone NOT NULL,
    object_id text COLLATE pg_catalog."default",
    object_repr character varying(200) COLLATE pg_catalog."default" NOT NULL,
    action_flag smallint NOT NULL,
    change_message text COLLATE pg_catalog."default" NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.django_content_type
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    app_label character varying(100) COLLATE pg_catalog."default" NOT NULL,
    model character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT django_content_type_pkey PRIMARY KEY (id),
    CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model)
);

CREATE TABLE IF NOT EXISTS public.django_migrations
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    app character varying(255) COLLATE pg_catalog."default" NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    applied timestamp with time zone NOT NULL,
    CONSTRAINT django_migrations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.django_session
(
    session_key character varying(40) COLLATE pg_catalog."default" NOT NULL,
    session_data text COLLATE pg_catalog."default" NOT NULL,
    expire_date timestamp with time zone NOT NULL,
    CONSTRAINT django_session_pkey PRIMARY KEY (session_key)
);

CREATE TABLE IF NOT EXISTS public.domainexperts
(
    expertid integer NOT NULL,
    expertisearea character varying(100) COLLATE pg_catalog."default",
    approved boolean DEFAULT false,
    CONSTRAINT domainexperts_pkey PRIMARY KEY (expertid)
);

CREATE TABLE IF NOT EXISTS public.electronichealthrecords
(
    ehrid integer NOT NULL DEFAULT nextval('electronichealthrecords_ehrid_seq'::regclass),
    patientid integer,
    height numeric(5, 2),
    weight numeric(5, 2),
    diagnosisid integer,
    CONSTRAINT electronichealthrecords_pkey PRIMARY KEY (ehrid)
);

CREATE TABLE IF NOT EXISTS public.knowledgeentries
(
    knowledgeid integer NOT NULL DEFAULT nextval('knowledgeentries_knowledgeid_seq'::regclass),
    expertid integer,
    entrydate date,
    content text COLLATE pg_catalog."default",
    CONSTRAINT knowledgeentries_pkey PRIMARY KEY (knowledgeid)
);

CREATE TABLE IF NOT EXISTS public.meetings
(
    meetingid integer NOT NULL DEFAULT nextval('meetings_meetingid_seq'::regclass),
    patientid integer,
    practitionerid integer,
    meetingdate date,
    status character varying(20) COLLATE pg_catalog."default",
    meetingtime time without time zone,
    CONSTRAINT meetings_pkey PRIMARY KEY (meetingid)
);

CREATE TABLE IF NOT EXISTS public.patientdiseases
(
    patientid integer NOT NULL,
    diseaseid integer NOT NULL,
    CONSTRAINT patientdiseases_pkey PRIMARY KEY (patientid, diseaseid)
);

CREATE TABLE IF NOT EXISTS public.patients
(
    patientid integer NOT NULL,
    blood_group character varying(5) COLLATE pg_catalog."default",
    occupation character varying(100) COLLATE pg_catalog."default",
    marital_status character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT patients_pkey PRIMARY KEY (patientid)
);

CREATE TABLE IF NOT EXISTS public.patientsymptoms
(
    patientid integer NOT NULL,
    symptomid integer NOT NULL,
    intensity integer,
    is_in_family boolean,
    odd_symptoms boolean,
    CONSTRAINT patientsymptoms_pkey PRIMARY KEY (patientid, symptomid)
);

CREATE TABLE IF NOT EXISTS public.person
(
    personid integer NOT NULL DEFAULT nextval('person_personid_seq'::regclass),
    firstname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    password character varying(255) COLLATE pg_catalog."default",
    address character varying(255) COLLATE pg_catalog."default",
    gender character varying(10) COLLATE pg_catalog."default",
    date_of_birth date,
    cnic character varying(15) COLLATE pg_catalog."default",
    type integer,
    image bytea,
    CONSTRAINT person_pkey PRIMARY KEY (personid),
    CONSTRAINT unique_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.practitioners
(
    practitionerid integer NOT NULL,
    certification character varying(100) COLLATE pg_catalog."default",
    experience integer,
    specialization character varying(100) COLLATE pg_catalog."default",
    issenior boolean DEFAULT false,
    CONSTRAINT practitioners_pkey PRIMARY KEY (practitionerid)
);

CREATE TABLE IF NOT EXISTS public.prescription
(
    prescid integer NOT NULL DEFAULT nextval('prescription_prescid_seq'::regclass),
    prescname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    diet character varying(100) COLLATE pg_catalog."default",
    amount numeric(10, 2),
    method character varying(100) COLLATE pg_catalog."default",
    patientid integer NOT NULL,
    diseaseid integer NOT NULL,
    presc_date date,
    CONSTRAINT prescription_pkey PRIMARY KEY (prescid)
);

CREATE TABLE IF NOT EXISTS public.questions
(
    questionid integer NOT NULL DEFAULT nextval('questions_questionid_seq'::regclass),
    statement text COLLATE pg_catalog."default" NOT NULL,
    answer text COLLATE pg_catalog."default",
    type text COLLATE pg_catalog."default",
    body_part text COLLATE pg_catalog."default",
    answer_date date,
    CONSTRAINT questions_pkey PRIMARY KEY (questionid)
);

CREATE TABLE IF NOT EXISTS public.symptomdisease
(
    symptomid integer NOT NULL,
    diseaseid integer NOT NULL,
    CONSTRAINT symptomdisease_pkey PRIMARY KEY (symptomid, diseaseid)
);

CREATE TABLE IF NOT EXISTS public.symptoms
(
    symptomid integer NOT NULL DEFAULT nextval('symptoms_symptomid_seq'::regclass),
    symptomname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT symptoms_pkey PRIMARY KEY (symptomid)
);

ALTER TABLE IF EXISTS public.activity
    ADD CONSTRAINT fk_activity_person FOREIGN KEY (person_id)
    REFERENCES public.person (personid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id)
    REFERENCES public.auth_permission (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_group_permissions_permission_id_84c5c92e
    ON public.auth_group_permissions(permission_id);


ALTER TABLE IF EXISTS public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id)
    REFERENCES public.auth_group (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_group_permissions_group_id_b120cbf9
    ON public.auth_group_permissions(group_id);


ALTER TABLE IF EXISTS public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id)
    REFERENCES public.django_content_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_permission_content_type_id_2f476e4b
    ON public.auth_permission(content_type_id);


ALTER TABLE IF EXISTS public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id)
    REFERENCES public.auth_group (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_user_groups_group_id_97559544
    ON public.auth_user_groups(group_id);


ALTER TABLE IF EXISTS public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_user_groups_user_id_6a12ed8b
    ON public.auth_user_groups(user_id);


ALTER TABLE IF EXISTS public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id)
    REFERENCES public.auth_permission (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_user_user_permissions_permission_id_1fbb5f2c
    ON public.auth_user_user_permissions(permission_id);


ALTER TABLE IF EXISTS public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS auth_user_user_permissions_user_id_a95ead1b
    ON public.auth_user_user_permissions(user_id);


ALTER TABLE IF EXISTS public.diagnosed_disease
    ADD CONSTRAINT diagnosed_disease_diagnosis_id_fkey FOREIGN KEY (diagnosis_id)
    REFERENCES public.diagnoses (diagnosisid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diagnosed_disease
    ADD CONSTRAINT diagnosed_disease_disease_id_fkey FOREIGN KEY (disease_id)
    REFERENCES public.diseases (diseaseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diagnoses
    ADD CONSTRAINT diagnoses_patientid_fkey FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diagnoses
    ADD CONSTRAINT diagnoses_practitionerid_fkey FOREIGN KEY (practitionerid)
    REFERENCES public.practitioners (practitionerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.diagnoses
    ADD CONSTRAINT fk_patient FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diagnoses
    ADD CONSTRAINT fk_practitioner FOREIGN KEY (practitionerid)
    REFERENCES public.practitioners (practitionerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.diagnosisratings
    ADD CONSTRAINT diagnosisratings_diagnosisid_fkey FOREIGN KEY (diagnosisid)
    REFERENCES public.diagnoses (diagnosisid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.digitaldataratings
    ADD CONSTRAINT digitaldataratings_knowledgeid_fkey FOREIGN KEY (knowledgeid)
    REFERENCES public.knowledgeentries (knowledgeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id)
    REFERENCES public.django_content_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS django_admin_log_content_type_id_c4bce8eb
    ON public.django_admin_log(content_type_id);


ALTER TABLE IF EXISTS public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id)
    REFERENCES public.auth_user (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX IF NOT EXISTS django_admin_log_user_id_c564eba6
    ON public.django_admin_log(user_id);


ALTER TABLE IF EXISTS public.domainexperts
    ADD CONSTRAINT domainexperts_expertid_fkey FOREIGN KEY (expertid)
    REFERENCES public.person (personid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS domainexperts_pkey
    ON public.domainexperts(expertid);


ALTER TABLE IF EXISTS public.electronichealthrecords
    ADD CONSTRAINT electronichealthrecords_patientid_fkey FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.electronichealthrecords
    ADD CONSTRAINT fk_ehr_diagnoses FOREIGN KEY (diagnosisid)
    REFERENCES public.diagnoses (diagnosisid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.electronichealthrecords
    ADD CONSTRAINT fk_ehr_patient FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.knowledgeentries
    ADD CONSTRAINT fk_expert FOREIGN KEY (expertid)
    REFERENCES public.domainexperts (expertid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.knowledgeentries
    ADD CONSTRAINT knowledgeentries_expertid_fkey FOREIGN KEY (expertid)
    REFERENCES public.domainexperts (expertid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.meetings
    ADD CONSTRAINT fk_meeting_patient FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.meetings
    ADD CONSTRAINT fk_meeting_practitioner FOREIGN KEY (practitionerid)
    REFERENCES public.practitioners (practitionerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.meetings
    ADD CONSTRAINT meetings_patientid_fkey FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.meetings
    ADD CONSTRAINT meetings_practitionerid_fkey FOREIGN KEY (practitionerid)
    REFERENCES public.practitioners (practitionerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patientdiseases
    ADD CONSTRAINT fk_disease_patient FOREIGN KEY (diseaseid)
    REFERENCES public.diseases (diseaseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patientdiseases
    ADD CONSTRAINT fk_patient_diseases FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patients
    ADD CONSTRAINT patients_patientid_fkey FOREIGN KEY (patientid)
    REFERENCES public.person (personid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS patients_pkey
    ON public.patients(patientid);


ALTER TABLE IF EXISTS public.patientsymptoms
    ADD CONSTRAINT fk_patient_symptoms FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patientsymptoms
    ADD CONSTRAINT fk_symptom_patient FOREIGN KEY (symptomid)
    REFERENCES public.symptoms (symptomid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.practitioners
    ADD CONSTRAINT practitioners_practitionerid_fkey FOREIGN KEY (practitionerid)
    REFERENCES public.person (personid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS practitioners_pkey
    ON public.practitioners(practitionerid);


ALTER TABLE IF EXISTS public.prescription
    ADD CONSTRAINT fk_prescription_disease FOREIGN KEY (diseaseid)
    REFERENCES public.diseases (diseaseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.prescription
    ADD CONSTRAINT fk_prescription_patient FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.symptomdisease
    ADD CONSTRAINT symptomdisease_diseaseid_fkey FOREIGN KEY (diseaseid)
    REFERENCES public.diseases (diseaseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.symptomdisease
    ADD CONSTRAINT symptomdisease_symptomid_fkey FOREIGN KEY (symptomid)
    REFERENCES public.symptoms (symptomid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;