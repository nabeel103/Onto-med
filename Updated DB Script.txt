-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.diagnoses
(
    diagnosisid integer NOT NULL DEFAULT nextval('diagnoses_diagnosisid_seq'::regclass),
    patientid integer,
    practitionerid integer,
    diagnosisdate date,
    automateddiagnosis text COLLATE pg_catalog."default",
    practitionerdiagnosis text COLLATE pg_catalog."default",
    regulatorrating integer,
    CONSTRAINT diagnoses_pkey PRIMARY KEY (diagnosisid)
);

CREATE TABLE IF NOT EXISTS public.diagnosisratings
(
    ratingid integer NOT NULL DEFAULT nextval('diagnosisratings_ratingid_seq'::regclass),
    regulatorid integer,
    diagnosisid integer,
    ratingvalue numeric(5, 2),
    comment text COLLATE pg_catalog."default",
    CONSTRAINT diagnosisratings_pkey PRIMARY KEY (ratingid)
);

CREATE TABLE IF NOT EXISTS public.digitaldataratings
(
    dataratingid integer NOT NULL DEFAULT nextval('digitaldataratings_dataratingid_seq'::regclass),
    regulatorid integer,
    knowledgeid integer,
    ratingvalue numeric(5, 2),
    validation boolean,
    editing boolean,
    CONSTRAINT digitaldataratings_pkey PRIMARY KEY (dataratingid)
);

CREATE TABLE IF NOT EXISTS public.diseases
(
    diseaseid integer NOT NULL DEFAULT nextval('diseases_diseaseid_seq'::regclass),
    diseasename character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT diseases_pkey PRIMARY KEY (diseaseid)
);

CREATE TABLE IF NOT EXISTS public.domainexperts
(
    expertid integer NOT NULL,
    expertisearea character varying(100) COLLATE pg_catalog."default",
    approved boolean DEFAULT false,
    CONSTRAINT domainexperts_pkey PRIMARY KEY (expertid)
);

CREATE TABLE IF NOT EXISTS public.electronichealthrecords
(
    ehrid integer NOT NULL DEFAULT nextval('electronichealthrecords_ehrid_seq'::regclass),
    patientid integer,
    height numeric(5, 2),
    weight numeric(5, 2),
    diagnosisid integer,
    CONSTRAINT electronichealthrecords_pkey PRIMARY KEY (ehrid)
);

CREATE TABLE IF NOT EXISTS public.knowledgeentries
(
    knowledgeid integer NOT NULL DEFAULT nextval('knowledgeentries_knowledgeid_seq'::regclass),
    expertid integer,
    entrydate date,
    content text COLLATE pg_catalog."default",
    CONSTRAINT knowledgeentries_pkey PRIMARY KEY (knowledgeid)
);

CREATE TABLE IF NOT EXISTS public.meetings
(
    meetingid integer NOT NULL DEFAULT nextval('meetings_meetingid_seq'::regclass),
    patientid integer,
    practitionerid integer,
    meetingdate date,
    status character varying(20) COLLATE pg_catalog."default",
    meetingtime time without time zone,
    CONSTRAINT meetings_pkey PRIMARY KEY (meetingid)
);

CREATE TABLE IF NOT EXISTS public.patientdiseases
(
    patientid integer NOT NULL,
    diseaseid integer NOT NULL,
    CONSTRAINT patientdiseases_pkey PRIMARY KEY (patientid, diseaseid)
);

CREATE TABLE IF NOT EXISTS public.patients
(
    patientid integer NOT NULL,
    blood_group character varying(5) COLLATE pg_catalog."default",
    occupation character varying(100) COLLATE pg_catalog."default",
    marital_status character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT patients_pkey PRIMARY KEY (patientid)
);

CREATE TABLE IF NOT EXISTS public.patientsymptoms
(
    patientid integer NOT NULL,
    symptomid integer NOT NULL,
    intensity integer,
    is_in_family boolean,
    odd_symptoms boolean,
    CONSTRAINT patientsymptoms_pkey PRIMARY KEY (patientid, symptomid)
);

CREATE TABLE IF NOT EXISTS public.person
(
    personid integer NOT NULL DEFAULT nextval('person_personid_seq'::regclass),
    firstname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    password character varying(255) COLLATE pg_catalog."default",
    address character varying(255) COLLATE pg_catalog."default",
    gender character varying(10) COLLATE pg_catalog."default",
    date_of_birth date,
    cnic character varying(15) COLLATE pg_catalog."default",
    type integer,
    CONSTRAINT person_pkey PRIMARY KEY (personid),
    CONSTRAINT unique_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.practitioners
(
    practitionerid integer NOT NULL,
    certification character varying(100) COLLATE pg_catalog."default",
    experience integer,
    specialization character varying(100) COLLATE pg_catalog."default",
    issenior boolean DEFAULT false,
    CONSTRAINT practitioners_pkey PRIMARY KEY (practitionerid)
);

CREATE TABLE IF NOT EXISTS public.prescription
(
    prescid integer NOT NULL DEFAULT nextval('prescription_prescid_seq'::regclass),
    prescname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    diet character varying(100) COLLATE pg_catalog."default",
    amount numeric(10, 2),
    method character varying(100) COLLATE pg_catalog."default",
    patientid integer NOT NULL,
    diseaseid integer NOT NULL,
    CONSTRAINT prescription_pkey PRIMARY KEY (prescid)
);

CREATE TABLE IF NOT EXISTS public.questions
(
    questionid integer NOT NULL DEFAULT nextval('questions_questionid_seq'::regclass),
    statement text COLLATE pg_catalog."default" NOT NULL,
    answer text COLLATE pg_catalog."default",
    type text COLLATE pg_catalog."default",
    body_part text COLLATE pg_catalog."default",
    answer_date date,
    CONSTRAINT questions_pkey PRIMARY KEY (questionid)
);

CREATE TABLE IF NOT EXISTS public.symptomdisease
(
    symptomid integer NOT NULL,
    diseaseid integer NOT NULL,
    CONSTRAINT symptomdisease_pkey PRIMARY KEY (symptomid, diseaseid)
);

CREATE TABLE IF NOT EXISTS public.symptoms
(
    symptomid integer NOT NULL DEFAULT nextval('symptoms_symptomid_seq'::regclass),
    symptomname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT symptoms_pkey PRIMARY KEY (symptomid)
);

ALTER TABLE IF EXISTS public.diagnoses
    ADD CONSTRAINT diagnoses_patientid_fkey FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diagnoses
    ADD CONSTRAINT diagnoses_practitionerid_fkey FOREIGN KEY (practitionerid)
    REFERENCES public.practitioners (practitionerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diagnoses
    ADD CONSTRAINT fk_patient FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diagnoses
    ADD CONSTRAINT fk_practitioner FOREIGN KEY (practitionerid)
    REFERENCES public.practitioners (practitionerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diagnosisratings
    ADD CONSTRAINT diagnosisratings_diagnosisid_fkey FOREIGN KEY (diagnosisid)
    REFERENCES public.diagnoses (diagnosisid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.digitaldataratings
    ADD CONSTRAINT digitaldataratings_knowledgeid_fkey FOREIGN KEY (knowledgeid)
    REFERENCES public.knowledgeentries (knowledgeid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.domainexperts
    ADD CONSTRAINT domainexperts_expertid_fkey FOREIGN KEY (expertid)
    REFERENCES public.person (personid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS domainexperts_pkey
    ON public.domainexperts(expertid);


ALTER TABLE IF EXISTS public.electronichealthrecords
    ADD CONSTRAINT electronichealthrecords_patientid_fkey FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.electronichealthrecords
    ADD CONSTRAINT fk_ehr_diagnoses FOREIGN KEY (diagnosisid)
    REFERENCES public.diagnoses (diagnosisid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.electronichealthrecords
    ADD CONSTRAINT fk_ehr_patient FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.knowledgeentries
    ADD CONSTRAINT fk_expert FOREIGN KEY (expertid)
    REFERENCES public.domainexperts (expertid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.knowledgeentries
    ADD CONSTRAINT knowledgeentries_expertid_fkey FOREIGN KEY (expertid)
    REFERENCES public.domainexperts (expertid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.meetings
    ADD CONSTRAINT fk_meeting_patient FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.meetings
    ADD CONSTRAINT fk_meeting_practitioner FOREIGN KEY (practitionerid)
    REFERENCES public.practitioners (practitionerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.meetings
    ADD CONSTRAINT meetings_patientid_fkey FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.meetings
    ADD CONSTRAINT meetings_practitionerid_fkey FOREIGN KEY (practitionerid)
    REFERENCES public.practitioners (practitionerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patientdiseases
    ADD CONSTRAINT fk_disease_patient FOREIGN KEY (diseaseid)
    REFERENCES public.diseases (diseaseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patientdiseases
    ADD CONSTRAINT fk_patient_diseases FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patients
    ADD CONSTRAINT patients_patientid_fkey FOREIGN KEY (patientid)
    REFERENCES public.person (personid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS patients_pkey
    ON public.patients(patientid);


ALTER TABLE IF EXISTS public.patientsymptoms
    ADD CONSTRAINT fk_patient_symptoms FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.patientsymptoms
    ADD CONSTRAINT fk_symptom_patient FOREIGN KEY (symptomid)
    REFERENCES public.symptoms (symptomid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.practitioners
    ADD CONSTRAINT practitioners_practitionerid_fkey FOREIGN KEY (practitionerid)
    REFERENCES public.person (personid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS practitioners_pkey
    ON public.practitioners(practitionerid);


ALTER TABLE IF EXISTS public.prescription
    ADD CONSTRAINT fk_prescription_disease FOREIGN KEY (diseaseid)
    REFERENCES public.diseases (diseaseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.prescription
    ADD CONSTRAINT fk_prescription_patient FOREIGN KEY (patientid)
    REFERENCES public.patients (patientid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.symptomdisease
    ADD CONSTRAINT symptomdisease_diseaseid_fkey FOREIGN KEY (diseaseid)
    REFERENCES public.diseases (diseaseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.symptomdisease
    ADD CONSTRAINT symptomdisease_symptomid_fkey FOREIGN KEY (symptomid)
    REFERENCES public.symptoms (symptomid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;